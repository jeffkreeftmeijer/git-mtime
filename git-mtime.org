:PROPERTIES:
:ID:       1A128F38-0D9B-4D35-B072-EC79AE83ECB1
:END:
#+title: git-mtime
#+author: Jeff Kreeftmeijer
#+date: 2023-03-06
#+options: toc:nil

git-mtime is a Git extension that finds a [[id:32BBE405-C34A-4CBD-A888-FF714441C544][last modified times through Git commits]]:

Git repositories provide records of deliberate updates through commit logs. By retrieving the last commit date for a specific file, we can find the last date a file was purposefully updated.

#+headers: :exports none
#+headers: :shebang #!/bin/bash
#+headers: :eval no
#+headers: :tangle git-mtime
#+begin_src shell
  path="${@: -1}"
  dir=$(dirname "$path")

  hash=$(git -C "$dir" log \
	     --format="%ad %H" \
	     --date=format:"%s" \
	     --grep="\[date skip\]" \
	     --invert-grep \
	     -- $(basename "$path") |\
	     sort --reverse |\
	     awk '{ print $2 }' |\
	     head -n1)

  git -C "$dir" show --format="%ad" --quiet "${@:1:$#-1}" "${hash}"
#+end_src

#+INCLUDE: "git-mtime" src shell

* Installation

Download git-mtime and symlink it to =/usr/local/bin/git-mtime=:

#+headers: :eval no
#+headers: :prologue rm -f /usr/local/bin/git-mtime
#+begin_src shell
  curl --remote-name --silent https://raw.githubusercontent.com/jeffkreeftmeijer/git-mtime/main/git-mtime
  ln -s $(realpath git-mtime) /usr/local/bin/git-mtime
#+end_src

* Usage

Execute =git mtime= with a path to a file in a Git repository:

# Mon Mar 6 18:24:11 2023 +0100
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt' && cd repository
#+headers: :epilogue cd .. && rm -rf repository
#+begin_src shell
git mtime file.txt
#+end_src

#+RESULTS[6ffa177f8cfbc3f212420df78adecbfdf2990cb8]:
: Mon Mar 6 18:24:11 2023 +0100

Even outside of the repository, =git-mtime= can find the commit history and find a file's last update date:

# Mon Mar 6 18:24:11 2023 +0100
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt'
#+headers: :epilogue rm -rf repository
#+begin_src shell
git mtime repository/file.txt
#+end_src

#+RESULTS[5f748a5431444a86d5d06f69bdc09c001da2d05f]:
: Mon Mar 6 18:24:11 2023 +0100

By relying on =git-log= internally, =git-mtime= supports Git's  =--date= flag:

# 2023-03-06 18:24
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt'
#+headers: :epilogue rm -rf repository
#+begin_src shell
  git mtime --date=format:"%F %R" repository/file.txt
#+end_src

#+RESULTS[7a61be146dc0b512144a890281e9ce4cab3fdd70]:
: 2023-03-06 18:24

If a commit touches a file, but you don't want to modify the file's modified time, mark the commit with =[date skip]= in its commit message to make =git-mtime= ignore it:

# Mon Mar 6 18:24:11 2023 +0100
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "filet.xt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt' && git -C repository commit --allow-empty --quiet --date="2023-03-06 19:12:45" --author="Bob <bob@example.com>" --message 'Add another.txt'
#+headers: :epilogue rm -rf repository
#+begin_src shell
  echo "file.txt" >> repository/file.txt
  git -C repository add .
  git -C repository commit --quiet --message 'Fix file.txt' --message "[date skip]"
  ./git-mtime repository/file.txt
#+end_src

#+RESULTS[b8ecda2278e40dd12ddb1da12c48078a690b9a34]:
: Mon Mar 6 18:24:11 2023 +0100

* Testing :noexport:

Given a repository with a single file:

# Mon Mar 6 18:24:11 2023 +0100
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt'
#+headers: :epilogue cd .. && rm -rf repository
#+begin_src shell
(cd repository && ../git-mtime file.txt)
#+end_src

#+RESULTS[d3c2b166135578613505a0487c03ba667b91ca48]:
: Mon Mar 6 18:24:11 2023 +0100

When passing no file name:

# Mon Mar 6 19:12:45 2023 +0100
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt' && git -C repository commit --allow-empty --quiet --date="2023-03-06 19:12:45" --author="Bob <bob@example.com>" --message 'Add another.txt'
#+headers: :epilogue rm -rf repository
#+begin_src shell
(cd repository && ../git-mtime)
#+end_src

#+RESULTS[c8f20b955fee15e290fc24f39f4a93950c9f9342]:
: Mon Mar 6 19:12:45 2023 +0100

Given a repository in another directory:

# Mon Mar 6 18:24:11 2023 +0100
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt'
#+headers: :epilogue rm -rf repository
#+begin_src shell
./git-mtime repository/file.txt
#+end_src

#+RESULTS[42be1f8acf1868eda1a5cd9f3c4296dd31c26522]:
: Mon Mar 6 18:24:11 2023 +0100

Given a repository with a multiple files:

# Mon Mar 6 18:24:11 2023 +0100
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt' && git -C repository commit --allow-empty --quiet --date="2023-03-06 19:12:45" --author="Bob <bob@example.com>" --message 'Add another.txt'
#+headers: :epilogue rm -rf repository
#+begin_src shell
./git-mtime repository/file.txt
#+end_src

#+RESULTS[9d0324703704b77b50757b2a100ae7bb9ac3aebf]:
: Mon Mar 6 18:24:11 2023 +0100

Given a repository with a skipped commit:

# Mon Mar 6 18:24:11 2023 +0100
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "filet.xt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt' && git -C repository commit --allow-empty --quiet --date="2023-03-06 19:12:45" --author="Bob <bob@example.com>" --message 'Add another.txt' && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 19:55:34" --author="Alice <alice@example.com>" --message 'Fix file.txt' --message "[date skip]"
#+headers: :epilogue rm -rf repository
#+begin_src shell
./git-mtime repository/file.txt
#+end_src

#+RESULTS[70f52e7e6bb7190580160513bf926128b068aaf2]:
: Mon Mar 6 18:24:11 2023 +0100

Given a repository non-chronological commits

# Mon Mar 6 18:24:11 2023 +0100
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "filet.xt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt' && git -C repository commit --allow-empty --quiet --date="2023-03-06 19:12:45" --author="Bob <bob@example.com>" --message 'Add another.txt' && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 15:11:11" --author="Alice <alice@example.com>" --message 'Fix file.txt'
#+headers: :epilogue rm -rf repository
#+begin_src shell
./git-mtime repository/file.txt
#+end_src

#+RESULTS[8dc30180a4e9382a827530549ab6eb4387682954]:
: Mon Mar 6 18:24:11 2023 +0100

When passing a custom date format:

# 2023-03-06 18:24
#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :prologue mkdir -p repository && git init --quiet repository && echo "file.txt" >> repository/file.txt && git -C repository add . && git -C repository commit --quiet --date="2023-03-06 18:24:11" --author="Alice <alice@example.com>" --message 'Add file.txt'
#+headers: :epilogue rm -rf repository
#+begin_src shell
./git-mtime --date=format:"%F %R" repository/file.txt
#+end_src

#+RESULTS[ef2743ce1eb00bcba411a1ae57f1beefed5b703e]:
: 2023-03-06 18:24
