:PROPERTIES:
:ID:       32BBE405-C34A-4CBD-A888-FF714441C544
:END:
#+title: git-mtime
#+author: Jeff Kreeftmeijer
#+date: 2023-03-02
#+options: toc:nil

As the name suggests, the [[id:F1569615-ED2C-4D7B-8D62-457C4FA3D85D][modified time]] of a file is updated whenever the file is changed.
Although regular modified times work most of the time, some situations require a more cautious approach.

For example, when using modified times as the last updated date for a published article, the date should only update if the file received substantive changes rather than structural ones.
In those cases, an update should be a deliberate action.

Git repositories provide records of deliberate updates through commit logs.
By retrieving the last commit date for a specific file, we can find the last date a file was purposefully updated.

* Getting the modified date
:PROPERTIES:
:CUSTOM_ID: getting-the-modified-date
:END:

Given a repository with two commits:

#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :dir /tmp/git-mtime
#+headers: :mkdirp yes
#+headers: :prologue git init --quiet && echo "filet.xt" >> file.txt && git add . && git commit --quiet --date="17 minutes ago" --message 'Add file.txt' && echo "file.txt" >> file.txt && git add . && git commit --quiet --message 'Update file.txt' --message '[date skip]'
#+headers: :epilogue rm -rf /tmp/git-mtime
#+begin_src shell
 git log
#+end_src

#+RESULTS[e3f95eb0748392ac7f6a12633587ac895819797a]:
#+begin_example
commit 7c968f930a7782a339aaa07488018522c0548790
Author: Jeff Kreeftmeijer <jeffkreeftmeijer@gmail.com>
Date:   Thu Mar 2 11:26:56 2023 +0100

    Update file.txt
    
    [date skip]

commit fbae95bc56608eed6096965bfb76c8c1f2000af2
Author: Jeff Kreeftmeijer <jeffkreeftmeijer@gmail.com>
Date:   Thu Mar 2 11:09:56 2023 +0100

    Add file.txt
#+end_example

We'll use =git log= with the following options:

- =--pretty=%ad= :: Format the commit message to only show the author date
- =--date=format:"%F %R"= :: Format the returned date with =%F %R= as the =strftime= format, which shows a full date and time:
- =-1= :: Only return the last commit

#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :dir /tmp/git-mtime
#+headers: :mkdirp yes
#+headers: :prologue git init --quiet && echo "filet.xt" >> file.txt && git add . && git commit --quiet --date="17 minutes ago" --message 'Add file.txt' && echo "file.txt" >> file.txt && git add . && git commit --quiet --message 'Update file.txt' --message '[date skip]'
#+headers: :epilogue rm -rf /tmp/git-mtime
#+begin_src shell
 git log -1 --pretty=%ad --date=format:"%F %R" file.txt
#+end_src

#+RESULTS[ac82d35080e85f085415bed2fd23865147efc2da]:
: 2023-03-02 08:17

In order to allow commits that update files without updating their returned modified times, [[id:7A482AE1-88CB-46DC-9238-8A456F7D8E95][filter the commits]] out that match a specific flag in their messages, like =[skip date]=:

#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :dir /tmp/git-mtime
#+headers: :mkdirp yes
#+headers: :prologue git init --quiet && echo "filet.xt" >> file.txt && git add . && git commit --quiet --date="17 minutes ago" --message 'Add file.txt' && echo "file.txt" >> file.txt && git add . && git commit --quiet --message 'Update file.txt' --message '[date skip]'
#+headers: :epilogue rm -rf /tmp/git-mtime
#+begin_src shell
 git log -1 --pretty=%ad --date=format:"%F %R" --grep="\[date skip\]" --invert-grep file.txt
#+end_src

#+RESULTS[8e8dd00975d74b1d2a6acd3c857223754d8b5f11]:
: 2023-03-02 08:03

* Extending git
:PROPERTIES:
:CUSTOM_ID: extending-git
:END:

For easier reusability, we'll move the above command into a git extension by moving it to a script and calling it =git-mtime=:

#+caption: =git-mtime=
#+headers: :shebang #!/bin/bash
#+headers: :eval no
#+headers: :tangle git-mtime
#+begin_src shell
  git log -1 --pretty=%ad --grep="\[date skip\]" --invert-grep "$@"
#+end_src

Symlink it to =/usr/local/bin/git-mtime=:

#+headers: :prologue rm -f /usr/local/bin/git-mtime
#+begin_src shell
  ln -s $(realpath git-mtime) /usr/local/bin/git-mtime
#+end_src

#+RESULTS:

Because the script is available in the =$PATH= by symlinking it to =/user/local/bin=, it can be called by executing =git mtime=.
It takes a file name and returns its last commit date:

#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :dir /tmp/gtime
#+headers: :mkdirp yes
#+headers: :prologue git init --quiet && echo "file.txt" >> file.txt && git add . && git commit --quiet --message 'Add file.txt' && echo "file2.txt" >> file2.txt && git add . && git commit --quiet --date="one week ago" --message 'Add file2.txt'
#+begin_src shell
git mtime file2.txt
#+end_src

#+RESULTS[681594cedf1edeb076243894c0b0b274a3c92731]:
: Thu Feb 23 17:49:50 2023 +0100

It works without passing a file name too.
In that case, the latest update date for the repository is returned.

#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :dir /tmp/git-mtime
#+headers: :mkdirp yes
#+headers: :prologue git init --quiet && echo "file.txt" >> file.txt && git add . && git commit --quiet --message 'Add file.txt'
#+headers: :epilogue rm -rf /tmp/git-mtime
#+begin_src shell
  git mtime
#+end_src

#+RESULTS[ba1bf849a36293872eaaa4edd20a272a70aa2cff]:
: Thu Mar 2 17:49:47 2023 +0100

By relying on =git-log=, =git-mtime= still supports the =--date= flag:

#+headers: :cache yes
#+headers: :results scalar
#+headers: :exports both
#+headers: :dir /tmp/gtime
#+headers: :mkdirp yes
#+headers: :prologue git init --quiet && echo "file.txt" >> file.txt && git add . && git commit --quiet --message 'Add file.txt'
#+headers: :epilogue rm -rf /tmp/gtime
#+begin_src shell
  git mtime --date=format:"%F %R" file.txt
#+end_src

#+RESULTS[e3a016046e368d0bf8d049614ebcb0ea3101b78e]:
: 2023-03-02 17:49
